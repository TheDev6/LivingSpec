<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)packages\SqlMeta.1.0.5847.37675\lib\SqlMeta.dll" 
#><#@ assembly name="$(SolutionDir)packages\Dapper.1.42\lib\net45\Dapper.dll" 
#>
<#@ assembly name="System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ import namespace="SqlMeta.Data.Repositories" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@include file="..\..\..\X - CodeGen\Manager.tt"#>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<#@ output extension="/" #>
<#var extention = "cs";#>


<# 
    var dataRepo = new MetaRepository(manager.ConnectionString);
    var tables = dataRepo.GetTableInfo().Where(t => !t.TableName.Contains("sysdiagram")).ToList();
    var nameSpace = "LivingSpec.RootContracts.DataContracts.Domain";

foreach (var table in tables)
{
	var strippedTblName = StripTableName(table.TableName);
    var interfacedTableName = $"I{strippedTblName}";
    manager.StartNewFile($"{interfacedTableName}.{extention}");
    
#>
namespace <#=nameSpace#>
{
	using System;

	public interface <#=interfacedTableName#>
	{
	<# foreach (SqlMeta.Data.Types.SqlColumnInfo column in table.Columns)
	{#>
	<#=Manager.GetCSharpTypeFromSqlType(sqlType:column.DataType,isNullable:column.IsNullable)#> <#=column.ColumnName#> { get; set; }
	<#}#>
}
}

<#
var sprocs = dataRepo.GetStoredProcedureInfo().Where(t => !t.Name.Contains("sysdiagram")).ToList();
var runningSprocNames = new List<string>();
var tableNames = dataRepo.GetTableNames().Where(t => !t.Contains("sysdiagram")).ToList();

    foreach (var tableName in tableNames)
    {
        var selectName = $"{tableName}Select";
        var selectSproc = sprocs.SingleOrDefault(s => s.Name == selectName);
        runningSprocNames.Add(selectName);

        var insertName = $"{tableName}Insert";
        var insertSproc = sprocs.SingleOrDefault(s => s.Name == insertName);
        runningSprocNames.Add(insertName);

        var updateName = $"{tableName}Update";
        var updateSproc = sprocs.SingleOrDefault(s => s.Name == updateName);
        runningSprocNames.Add(updateName);

        var deleteName = $"{tableName}Delete";
        var deleteSproc = sprocs.SingleOrDefault(s => s.Name == deleteName);
        runningSprocNames.Add(deleteName);

        var findName = $"{tableName}Find";
        var findSproc = sprocs.SingleOrDefault(s => s.Name == findName);
        runningSprocNames.Add(findName);

        var searchName = $"{tableName}Search";
        var searchSproc = sprocs.SingleOrDefault(s => s.Name == searchName);
        runningSprocNames.Add(searchName);
    }
	 

var nonBoilerBlateSprocs = sprocs.Where(s => runningSprocNames.All(rs => rs != s.Name)).OrderBy(s=>s.Name).ToList();
foreach (var proc in nonBoilerBlateSprocs)
{
manager.StartNewFile($"I{proc.Name}.{extention}");
#>
namespace <#=nameSpace#>
{
	using System;

	public interface I<#=proc.Name#>
	{
	<#
    foreach (var column in proc.ResultColumns)
    {#>
        <#=
    $"{Manager.CSharpDeclarationFromDataProperties(cSharpDataType: column.DataType.ToString(), isAllowDbNull: column.AllowDBNull)} {column.ColumnName} {"{get;set;}"}"
    #>
	<#
	}
	#>
}
}
<#   
}
#>

	
<# manager.EndBlock(); #>

<#
}
#>

<# manager.Process(true); #>

<#+

    public static string StripTableName(string input)
    {
        return input.Replace("tbl", string.Empty);
    }

    internal string BuildFindAndSearchParameters(List<SqlParameterInfo> parameters, string sprocName = "")
    {
        var sb = new StringBuilder();

        var comma = String.Empty;
        var isSearchOrFind = sprocName.Contains("Search") || sprocName.Contains("Find");
        foreach (var p in parameters)
        {
            sb.Append(comma);
            sb.Append(Manager.GetCSharpTypeFromSqlType(sqlType: p.ParameterDataType, isNullable: isSearchOrFind));
            sb.Append(" ");
            sb.Append(Manager.FirstToLower(Manager.StripAtSign(p.Name)));
            if (isSearchOrFind) sb.Append(" = null");
            comma = ",";
        }

        return sb.ToString();
    }
#>