<#@ template debug="true" hostspecific="true" language="C#" 
#><#@ assembly name="System.Core" 
#><#@ assembly name="$(ProjectDir)..\packages\SqlMeta.1.0.5847.37675\lib\SqlMeta.dll" 
#><#@ assembly name="$(ProjectDir)..\packages\Dapper.1.42\lib\net45\Dapper.dll" 
#><#@ assembly name="System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" 
#><#@ import namespace="System.Linq" 
#><#@ import namespace="System.Text" 
#><#@ import namespace="System.Collections.Generic" 
#><#@include file="..\..\X - CodeGen\Manager.tt"
#><# var manager = Manager.Create(Host, GenerationEnvironment); 
#><#@ output extension=".cs"
#><# var extention = "cs";
#><#  
var databaseName = "LivingSpec";
    var dataRepo = new MetaRepository(manager.ConnectionString);
    var tableNames = dataRepo.GetTableNames().Where(t => !t.Contains("sysdiagram")).ToList();
	var tables = dataRepo.GetTableInfo().Where(t => !t.TableName.Contains("sysdiagram")).ToList();
    var sprocs = dataRepo.GetStoredProcedureInfo().Where(t => !t.Name.Contains("sysdiagram")).ToList();
    var nameSpace = "LivingSpec.DataAccess.DataObjects";
    var runningSprocNames = new List<string>();
#>namespace <#=nameSpace#>
{
	using System;
    using System.Collections.Generic;
    using System.Linq;
	using System.Threading.Tasks;
	using RootContracts.BehaviorContracts.DataAccess;
	using RootContracts.DataContracts.Domain;


	public partial class <#=databaseName#>Context : I<#=databaseName#>Context
	{

		private readonly IDapperWrapper _dbWrapper;
	
		public <#=databaseName#>Context(IDapperWrapper dbWrapper)
		{
			_dbWrapper = dbWrapper;
		}
<#
foreach (var tableName in tableNames)
{
    var selectName = String.Format("{0}Select", tableName);
    var selectSproc = sprocs.SingleOrDefault(s => s.Name == selectName);
	runningSprocNames.Add(selectName);

    var insertName = String.Format("{0}Insert", tableName);
    var insertSproc = sprocs.SingleOrDefault(s => s.Name == insertName);
	runningSprocNames.Add(insertName);

    var updateName = String.Format("{0}Update",tableName);
    var updateSproc = sprocs.SingleOrDefault(s => s.Name == updateName);
	runningSprocNames.Add(updateName);

    var deleteName = String.Format("{0}Delete", tableName);
    var deleteSproc = sprocs.SingleOrDefault(s => s.Name == deleteName);
	runningSprocNames.Add(deleteName);
	
    var findName = String.Format("{0}Find", tableName);
    var findSproc = sprocs.SingleOrDefault(s => s.Name == findName);
	runningSprocNames.Add(findName);

    var searchName = String.Format("{0}Search", tableName);
    var searchSproc = sprocs.SingleOrDefault(s=>s.Name == searchName);
	runningSprocNames.Add(searchName);
#>
		
		#region <#=tableName#>
		public I<#=tableName#> <#=selectName#>(Guid <#=Manager.FirstToLower(tableName)#>Guid)
		{
		   var input = new{<#=tableName#>Guid = <#=Manager.FirstToLower(tableName)#>Guid};
		   return _dbWrapper.CallProcedure<<#=tableName#>>(procedureName: <#=String.Format("\"[{0}].[{1}]\"",selectSproc.Schema,selectSproc.Name)#>, inputParams: input).SingleOrDefault();
		}
		
		public async Task<I<#=tableName#>> <#=selectName#>Async(Guid <#=Manager.FirstToLower(tableName)#>Guid)
		{
		   var input = new{<#=tableName#>Guid = <#=Manager.FirstToLower(tableName)#>Guid};
		   var result = await _dbWrapper.CallProcedureAsync<<#=tableName#>>(procedureName: <#=String.Format("\"[{0}].[{1}]\"",selectSproc.Schema,selectSproc.Name)#>, inputParams: input).ConfigureAwait(false);
		   return result.SingleOrDefault();
		}
		
		public void <#=insertName#>(I<#=tableName#> <#=Manager.FirstToLower(tableName)#>)
		{
			var input = new {<#=BuildInputParameterObjectInsertUpdate(parameters:insertSproc.Parameters, inputObjectName:tableName)#>
			};
		   _dbWrapper.ExecuteProcedure(procedureName: <#=String.Format("\"[{0}].[{1}]\"",insertSproc.Schema,insertSproc.Name)#>, inputParams: input);
		}

		public async Task <#=insertName#>Async(I<#=tableName#> <#=Manager.FirstToLower(tableName)#>)
		{
			var input = new {<#=BuildInputParameterObjectInsertUpdate(parameters:insertSproc.Parameters, inputObjectName:tableName)#>
			};
		   await _dbWrapper.ExecuteProcedureAsync(procedureName: <#=String.Format("\"[{0}].[{1}]\"",insertSproc.Schema,insertSproc.Name)#>, inputParams: input).ConfigureAwait(false);
		}

		public void <#=updateName#>(I<#=tableName#> <#=Manager.FirstToLower(tableName)#>)
		{
			var input = new {<#=BuildInputParameterObjectInsertUpdate(parameters:updateSproc.Parameters,inputObjectName:tableName)#>
			};
			_dbWrapper.ExecuteProcedure(procedureName: <#=String.Format("\"[{0}].[{1}]\"",updateSproc.Schema,updateSproc.Name)#>, inputParams: input);
		}

		public async Task <#=updateName#>Async(I<#=tableName#> <#=Manager.FirstToLower(tableName)#>)
		{
			var input = new {<#=BuildInputParameterObjectInsertUpdate(parameters:updateSproc.Parameters,inputObjectName:tableName)#>
			};
			await _dbWrapper.ExecuteProcedureAsync(procedureName: <#=String.Format("\"[{0}].[{1}]\"",updateSproc.Schema,updateSproc.Name)#>, inputParams: input).ConfigureAwait(false);;
		}
					
		public void <#=deleteName#>(Guid <#=Manager.FirstToLower(tableName)#>Guid)
		{
		   var input = new{<#=tableName#>Guid = <#=Manager.FirstToLower(tableName)#>Guid};
		   _dbWrapper.ExecuteProcedure(procedureName: <#=String.Format("\"[{0}].[{1}]\"",deleteSproc.Schema,deleteSproc.Name)#>, inputParams: input);
		}

		public async Task <#=deleteName#>Async(Guid <#=Manager.FirstToLower(tableName)#>Guid)
		{
		   var input = new{<#=tableName#>Guid = <#=Manager.FirstToLower(tableName)#>Guid};
		   await _dbWrapper.ExecuteProcedureAsync(procedureName: <#=String.Format("\"[{0}].[{1}]\"",deleteSproc.Schema,deleteSproc.Name)#>, inputParams: input).ConfigureAwait(false);
		}

		public List<I<#=tableName#>> <#=findName#>(<#=BuildFindAndSearchParameters(parameters: findSproc.Parameters,sprocName:findSproc.Name)#>)
		{
			var input = new {<#=BuildInputParameterObject(findSproc.Parameters)#>
			};
			var result = _dbWrapper.CallProcedure<<#=tableName#>>(procedureName: <#=String.Format("\"[{0}].[{1}]\"",findSproc.Schema,findSproc.Name)#>, inputParams: input).ToList();
			return new List<I<#=tableName#>>(result);
		}
		
		public async Task<List<I<#=tableName#>>> <#=findName#>Async(<#=BuildFindAndSearchParameters(parameters: findSproc.Parameters,sprocName:findSproc.Name)#>)
		{
			var input = new {<#=BuildInputParameterObject(findSproc.Parameters)#>
			};
			var result = await _dbWrapper.CallProcedureAsync<<#=tableName#>>(procedureName: <#=String.Format("\"[{0}].[{1}]\"",findSproc.Schema,findSproc.Name)#>, inputParams: input).ConfigureAwait(false);
			return new List<I<#=tableName#>>(result);
		}

		public List<I<#=tableName#>> <#=searchName#>(<#=BuildFindAndSearchParameters(parameters:searchSproc.Parameters,sprocName:searchSproc.Name)#>)
		{
			var input = new {<#=BuildInputParameterObject(searchSproc.Parameters)#>
			};
			var result = _dbWrapper.CallProcedure<<#=tableName#>>(procedureName: <#=String.Format("\"[{0}].[{1}]\"",searchSproc.Schema,searchSproc.Name)#>, inputParams: input).ToList();
			return new List<I<#=tableName#>>(result);
		}

		public async Task<List<I<#=tableName#>>> <#=searchName#>Async(<#=BuildFindAndSearchParameters(parameters:searchSproc.Parameters,sprocName:searchSproc.Name)#>)
		{
			var input = new {<#=BuildInputParameterObject(searchSproc.Parameters)#>
			};
			var result = await _dbWrapper.CallProcedureAsync<<#=tableName#>>(procedureName: <#=String.Format("\"[{0}].[{1}]\"",searchSproc.Schema,searchSproc.Name)#>, inputParams: input).ConfigureAwait(false);
			return new List<I<#=tableName#>>(result);
		} 
		#endregion

<#	        
}
#>

		#region GeneratedNonBoilerPlateSprocs
		<#
		var nonBoilerBlateSprocs = sprocs.Where(s => runningSprocNames.All(rs => rs != s.Name)).OrderBy(s=>s.Name).ToList();
		foreach (var proc in nonBoilerBlateSprocs)
		{#>

			public List<I<#=proc.Name#>> <#=proc.Name#>(<#=BuildFindAndSearchParameters(parameters:proc.Parameters,sprocName:proc.Name)#>)
			{
				var input = new {<#=BuildInputParameterObject(proc.Parameters)#>
				};
				var result = _dbWrapper.CallProcedure<<#=proc.Name#>>(procedureName: <#=String.Format("\"[{0}].[{1}]\"",proc.Schema,proc.Name)#>, inputParams: input).ToList();
				return new List<I<#=proc.Name#>>(result);
			}
			
			public async Task<List<I<#=proc.Name#>>> <#=proc.Name#>Async(<#=BuildFindAndSearchParameters(parameters:proc.Parameters,sprocName:proc.Name)#>)
			{
				var input = new {<#=BuildInputParameterObject(proc.Parameters)#>
				};
				var result = await _dbWrapper.CallProcedureAsync<<#=proc.Name#>>(procedureName: <#=String.Format("\"[{0}].[{1}]\"",proc.Schema,proc.Name)#>, inputParams: input).ConfigureAwait(false);;
				return new List<I<#=proc.Name#>>(result);
			}

		<#}#>
		#endregion


			}
		}



<#
//This starts the related classes associated with the non boiler plate sprocs
    var sprocResultTypesNamespace = nameSpace;
foreach (var proc in nonBoilerBlateSprocs)
{
	manager.StartNewFile(String.Format("{0}.{1}", proc.Name, extention));
#>		
namespace <#=sprocResultTypesNamespace#>
{
	using System;
	using RootContracts.DataContracts.Domain;

	public partial class <#=proc.Name#> : I<#=proc.Name#>
	{
	<#
    foreach (var column in proc.ResultColumns)
    {#>
        <#=String.Format("public {0} {1} {2}",Manager.CSharpDeclarationFromDataProperties(cSharpDataType: column.DataType.ToString(), isAllowDbNull:column.AllowDBNull), column.ColumnName,"{get;set;}")#>
	<#
	}
	#>
}
}
<#   
}
#>



<#
//this starts the class files
foreach (var table in tables)
{
    manager.StartNewFile(String.Format("{0}.{1}", table.TableName, extention));
#>

namespace <#=nameSpace#>
{ 
	using System;
	using RootContracts.DataContracts.Domain;

	public partial class <#=table.TableName#> : I<#=table.TableName#>
	{
	<# foreach (SqlMeta.Data.Types.SqlColumnInfo column in table.Columns)
	{#>
	public <#=Manager.GetCSharpTypeFromSqlType(sqlType:column.DataType,isNullable:column.IsNullable)#> <#=column.ColumnName.Trim()#> {get;set;}
	<#}#>
}
}
<#
}
#>


<# manager.EndBlock(); #>

<# manager.Process(true); #>

<#+
    internal string BuildFindAndSearchParameters(List<SqlParameterInfo> parameters, string sprocName = "")
    {
        var sb = new StringBuilder();

        var comma = String.Empty;
        var isSearchOrFind = sprocName.Contains("Search") || sprocName.Contains("Find");
        foreach (var p in parameters)
        {
            sb.Append(comma);
            sb.Append(Manager.GetCSharpTypeFromSqlType(sqlType: p.ParameterDataType, isNullable: isSearchOrFind));
            sb.Append(" ");
            sb.Append(Manager.FirstToLower(Manager.StripAtSign(p.Name)));
            if (isSearchOrFind) sb.Append(" = null");
            comma = ",";
        }

        return sb.ToString();
    }

    internal string BuildInputParameterObject(List<SqlParameterInfo> parameters)
    {
        var sb = new StringBuilder();

        var comma = string.Empty;
        foreach (var p in parameters)
        {
            sb.Append(comma);
			sb.Append(Manager.NewLine());
            var strippedName = Manager.StripAtSign(p.Name);
            var lowerName = Manager.FirstToLower(strippedName);
            sb.Append(String.Format("{0} = {1}", strippedName, lowerName));
            comma = ",";
        }

        return sb.ToString();
    }

	internal string BuildInputParameterObjectInsertUpdate(List<SqlParameterInfo> parameters,string inputObjectName)
    {
        var sb = new StringBuilder();

        var comma = string.Empty;
        foreach (var p in parameters)
        {
            sb.Append(comma);
			sb.Append(Manager.NewLine());
            var strippedName = Manager.StripAtSign(p.Name);
            var lowerName = Manager.FirstToLower(inputObjectName);
            sb.Append(String.Format("{0} = {1}.{0}", strippedName, lowerName));
            comma = ",";
        }

        return sb.ToString();
    }
#>